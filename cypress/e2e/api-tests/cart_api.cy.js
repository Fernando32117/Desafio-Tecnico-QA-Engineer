const baseUrl = 'https://dummyjson.com/carts';

describe('API Cart Tests', () => {

    // üõí 1Ô∏è‚É£ Adicionar item ao carrinho
    it('Deve adicionar um item ao carrinho', () => {
        cy.request({
            method: 'POST',
            url: `${baseUrl}/add`,
            body: {
                userId: 1,
                products: [{ id: 1, quantity: 2 }]
            }
        }).then((response) => {
            // ‚úÖ Teste de Parti√ß√£o de Equival√™ncia: Garantimos que um item v√°lido pode ser adicionado corretamente
            // ‚úÖ Teste de Valor Limite: Adicionamos um produto com quantidade m√≠nima > 1
            expect(response.status).to.eq(201); // Valida se a requisi√ß√£o foi bem-sucedida
            expect(response.body.products[0].id).to.eq(1); // Verifica se o produto correto foi adicionado
            expect(response.body.products[0].quantity).to.eq(2); // Valida a quantidade adicionada
        });
    });

    // üìù 2Ô∏è‚É£ Atualizar a quantidade de um item no carrinho
    it('Deve atualizar a quantidade de um item no carrinho', () => {
        cy.request({
            method: 'PUT',
            url: `${baseUrl}/1`, // Atualizando o carrinho do usu√°rio 1
            body: {
                products: [{ id: 1, quantity: 5 }]
            }
        }).then((response) => {
            // ‚úÖ Teste de Parti√ß√£o de Equival√™ncia: Testamos com uma quantidade v√°lida (dentro do esperado)
            // ‚úÖ Teste de Transi√ß√£o de Estado: Atualizamos um item e verificamos se a mudan√ßa √© refletida corretamente
            expect(response.status).to.eq(200); // Confirma que a atualiza√ß√£o foi realizada com sucesso
            expect(response.body.products[0].quantity).to.eq(5); // Valida se a quantidade foi corretamente alterada
        });
    });

    // üóëÔ∏è 3Ô∏è‚É£ Remover item do carrinho
    it('Deve remover um item do carrinho', () => {
        cy.request({
            method: 'DELETE',
            url: `${baseUrl}/1`
        }).then((response) => {
            // ‚úÖ Teste de Caso de Uso: Verificamos se o fluxo de remo√ß√£o segue conforme especificado
            // ‚úÖ Teste de Valor Limite: Removemos um item e esperamos que ele n√£o exista mais
            expect(response.status).to.eq(200); // Confirma que a remo√ß√£o foi realizada com sucesso
            expect(response.body.isDeleted).to.be.true; // Verifica se o item foi realmente exclu√≠do
        });
    });
});
